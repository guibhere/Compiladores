/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package AnaliseLexica;

import AnaliseSintatica.Yylex;
import AnaliseSintatica.parser;
import static java.awt.image.ImageObserver.WIDTH;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringReader;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.Symbol;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 12161003882
 */
public class Interface extends javax.swing.JFrame {

    /**
     * Creates new form Interfae
     */
    public Interface() {
        initComponents();
        this.analiseLexicaBox.setEditable(false);

//       new Thread(t1).start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuBar1 = new java.awt.MenuBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        areaDeTexto = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabela = new javax.swing.JTable();
        botaoLexico = new javax.swing.JButton();
        limpar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        analiseLexicaBox = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        arquivo = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 255, 51));

        areaDeTexto.setColumns(20);
        areaDeTexto.setRows(5);
        areaDeTexto.setBorder(new Borda());
        jScrollPane1.setViewportView(areaDeTexto);

        tabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Token", "Lexema", "Linha", "Coluna"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tabela);

        botaoLexico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/379336-24.png"))); // NOI18N
        botaoLexico.setText("Compilar");
        botaoLexico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoLexicoActionPerformed(evt);
            }
        });

        limpar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/img.png"))); // NOI18N
        limpar.setText("Limpar");
        limpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limparActionPerformed(evt);
            }
        });

        analiseLexicaBox.setColumns(20);
        analiseLexicaBox.setRows(5);
        jScrollPane3.setViewportView(analiseLexicaBox);

        arquivo.setText("Arquivo");

        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/118911-24.png"))); // NOI18N
        jMenuItem1.setText("Abrir");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        arquivo.add(jMenuItem1);

        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/285657-24.png"))); // NOI18N
        jMenuItem2.setText("Salvar");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        arquivo.add(jMenuItem2);

        jMenuBar1.add(arquivo);

        jMenu1.setText("Sobre");

        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/370079-24.png"))); // NOI18N
        jMenuItem3.setText("Mostar");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/3209233-24.png"))); // NOI18N
        jMenuItem4.setText("Tabela de Tokens");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 559, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botaoLexico)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE)
                            .addComponent(jScrollPane3))
                        .addGap(12, 12, 12))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(limpar)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botaoLexico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(limpar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("empty-statement")
    private void botaoLexicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoLexicoActionPerformed

        analiseLexicaBox.setText("");
        analiseLexicaBox.setText(analiseLexicaBox.getText() + "Analise lexica iniciada\n");

        String listaTokens = new String();
        boolean erro = false;

        try {

            //String path = "C:\\Users\\bhere\\Desktop\\ClusterV4\\src\\AnaliseLexica\\Lexer.flex";

            //gerarLexer(path);

            // Manda o código para o analisador léxico
            String texto = this.areaDeTexto.getText();
            Lexer lexer = new Lexer(new StringReader(texto));

            int linha = 1;
            int coluna = 0;

            //Cria registro e zera a tabela
            DefaultTableModel registros = (DefaultTableModel) tabela.getModel();
            registros.setRowCount(0);

            //Percorre todos os tokens
            Token token = lexer.yylex();
            int errorflag = 0;
            String werro = "";
            int errorposl = 0, errorposc = 0;
            while (token != null) {

                switch (token) {
                    case PLINHA:
                        if (errorflag == 1) {
                            Object[] erros = {"ERROR", werro, errorposl, errorposc};
                            registros.addRow(erros);
                            werro = "";
                        }
                        linha++;
                        coluna = 0;
                        listaTokens = "\n";
                        errorflag = 0;
                        break;
                    case ESPACO:
                        if (errorflag == 1) {
                            Object[] erros = {"ERROR", werro, errorposl, errorposc};
                            registros.addRow(erros);
                            werro = "";
                        }
                        if((lexer.lexeme=="\t")||(lexer.lexeme=="\r")){
                            coluna+=4;
                        }
                        else{
                        coluna++;}
                        errorflag = 0;
                        break;
                    case COMENT:
                        String comentario;
                        if (errorflag == 1) {
                            Object[] erros = {"ERROR", werro, errorposl, errorposc};
                            registros.addRow(erros);
                            werro = "";
                        }
                        int n,
                         flag;
                        n = 0;
                        flag = 0;
                        comentario = lexer.lexeme;
                        char ch;
                        for (int i = 0; i < comentario.length(); i++) {
                            ch = comentario.charAt(i);
                            n++;
                            if (ch == '\n') {
                                linha++;
                                n = 0;
                                flag = 1;

                            }
                        }
                        if (flag == 1) {
                            coluna = n;

                        } else {
                            coluna = coluna + n;
                        }
                        errorflag = 0;
                        break;
                    case ERRO:

                        //adiciona nas linhas da tabela
                        if (errorflag == 0) {
                            errorposl = linha;
                            errorposc = coluna;

                        }
                        werro += lexer.lexeme;

                        erro = true;
                        coluna += lexer.yylength();
                        errorflag = 1;
                        break;
                    default:
                        if (errorflag == 1) {
                            Object[] erros = {"ERROR", werro, errorposl, errorposc};
                            registros.addRow(erros);
                            werro = "";
                        }
                        Object[] linhas = {token, lexer.lexeme, linha, coluna};
                        //adiciona nas linhas da tabela
                        //System.out.println(token);
                        registros.addRow(linhas);

                        listaTokens += token.toString() + " ";
                        coluna += lexer.yylength();
                        errorflag = 0;
                        break;
                }
                //Incrementador de lexemas
                token = lexer.yylex();
            }
            if (errorflag == 1) {
                Object[] erros = {"ERROR", werro, errorposl, errorposc};
                registros.addRow(erros);
                werro = "";
                analiseLexicaBox.setText(analiseLexicaBox.getText() + "Erro durante Analise Lexica!\n");
            }

        } catch (Exception e) {
            analiseLexicaBox.setText(analiseLexicaBox.getText() + "Erro durante Analise Lexica!\n");
        }

        if (!erro) {

            analiseLexicaBox.setText(analiseLexicaBox.getText() + "Analise lexica concluida com sucesso!\n");
            analiseLexicaBox.setText(analiseLexicaBox.getText() + "Analise sintatica iniciada\n");

            parser p = new parser(new Yylex(new StringReader(areaDeTexto.getText())));

            try {
                p.parse();
                analiseLexicaBox.setText(analiseLexicaBox.getText() + "Analise sintatica concluida com sucesso!");

            } catch (Exception ex) {
                Symbol s = p.getS();
                this.analiseLexicaBox.setText("Erro sintatico - Linha: " + (s.right + 1) + " - Token: " + s.value + "\n");
            }

        }


    }//GEN-LAST:event_botaoLexicoActionPerformed

    // JmenuItem Arquivo ->  JmenuItem Abrir
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        // Abrir seletor de arquivos
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Procurar Arquivo");

        fileChooser.setFileFilter(new javax.swing.filechooser.FileFilter() {

            public boolean accept(File f) {
                return (f.getName().endsWith(".txt")) || f.isDirectory();
            }

            public String getDescription() {
                return "*.txt";
            }

        });

        // abre o seletor de arquivos
        int retorno = fileChooser.showOpenDialog(this);

        // Ao clicar em um arquivo selecionado
        if (retorno == JFileChooser.APPROVE_OPTION) {

            // Joga para um file o arquivo selecionado 
            File file = fileChooser.getSelectedFile();

            try {
                // Lê o arquivo
                String texto = new String(Files.readAllBytes(Paths.get(file.getPath())), "ISO-8859-1");
                // Manda texto para a área de texto
                areaDeTexto.setText(texto);
            } catch (IOException ex) {
                Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
            }
        }


    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void limparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limparActionPerformed
        areaDeTexto.setText("");
        DefaultTableModel registros = (DefaultTableModel) tabela.getModel();
        registros.setRowCount(0);
    }//GEN-LAST:event_limparActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        JFileChooser file = new JFileChooser();
        file.setFileFilter(new javax.swing.filechooser.FileFilter() {
            public boolean accept(File f) {
                return (f.getName().endsWith(".cr")) || f.isDirectory();
            }

            public String getDescription() {
                return "*.txt";
            }
        });
        file.showSaveDialog(this);
        File f = new File(file.getSelectedFile() + ".txt");

        try {
            FileWriter fw = new FileWriter(f);
            String texto = areaDeTexto.getText();
            fw.write(texto);
            fw.close();

            JOptionPane.showMessageDialog(this, "Arquivo salvo com sucesso!", "Sucesso!", WIDTH);
        } catch (Exception e) {

        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
                About s = new About();
        s.setVisible(true);// TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        Tokens t = new Tokens();
        t.setVisible(true);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    public static void gerarLexer(String path) {
        File file = new File(path);
        JFlex.Main.generate(file);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea analiseLexicaBox;
    private javax.swing.JTextArea areaDeTexto;
    private javax.swing.JMenu arquivo;
    private javax.swing.JButton botaoLexico;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton limpar;
    private java.awt.MenuBar menuBar1;
    private javax.swing.JTable tabela;
    // End of variables declaration//GEN-END:variables
}
